// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String             @id @default(cuid())
  createdAt               DateTime           @default(now())
  updatedAt               DateTime           @updatedAt
  email                   String             @unique
  firstName               String?
  lastName                String?
  username                String?            @unique
  photo                   String?
  isVerified              Boolean            @default(false)
  role                    Role               @default(USER)
  prefersUnitSystem       UnitSystem         @default(METRIC)
  prefersTemperatureScale TemperatureScale   @default(C)
  prefersDisplayName      DisplayName        @default(email)
  ingredients             Ingredient[]
  steps                   Step[]
  comments                Comment[]
  recipes                 Recipe[]
  subRecipes              SubRecipe[]
  emailChangeTokes        EmailChangeToken[]
}

model EmailChangeToken {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  oldEmail  String
  newEmail  String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
}

model Recipe {
  id             String          @id @default(cuid())
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  slug           String?         @unique
  name           Json // { [lang]: string | null }
  description    Json // { [lang]: string | null }
  difficulty     Difficulty
  prepTime       Int?            @db.SmallInt
  cookTime       Int?            @db.SmallInt
  bakeTime       Int?            @db.SmallInt
  servings       Int?            @db.SmallInt
  categories     String[]
  tags           String[]
  languages      String[]
  status         Status          @default(UNPUBLISHED)
  steps          Step[]
  ingredients    Ingredient[]
  commentThreads CommentThread[]
  subRecipes     SubRecipe[]
}

model Ingredient {
  id           String     @id @default(uuid())
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  position     Int        @default(autoincrement())
  stepPosition Int        @default(autoincrement())
  name         Json // { [lang]: string | null }
  quantity     Decimal?
  note         Json? // { [lang]: string | null }
  unit         Unit?
  isAvailable  Boolean    @default(false)
  isUsed       Boolean    @default(false)
  recipe       Recipe     @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  recipeId     String
  subRecipe    SubRecipe? @relation(fields: [subRecipeId], references: [id], onDelete: Cascade)
  subRecipeId  String?
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  step         Step?      @relation(fields: [stepId], references: [id], onDelete: Cascade)
  stepId       String?
}

model SubRecipe {
  id          String       @id @default(uuid())
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  name        Json // { [lang]: string | null }
  ingredients Ingredient[]
  recipe      Recipe       @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  recipeId    String
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
}

model Step {
  id               String            @id @default(uuid())
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  position         Int               @default(autoincrement())
  recipe           Recipe            @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  recipeId         String
  user             User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId           String
  content          Json // { [lang]: string | null }
  temperature      Int?              @db.SmallInt
  temperatureScale TemperatureScale?
  ingredients      Ingredient[]
}

model CommentThread {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  content   String
  recipe    Recipe    @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  recipeId  String
  comments  Comment[]
}

model Comment {
  id              String        @id @default(uuid())
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  user            User          @relation(fields: [userId], references: [id])
  userId          String
  commentThread   CommentThread @relation(fields: [commentThreadId], references: [id], onDelete: Cascade)
  commentThreadId String
  content         String
}

enum Role {
  ADMIN
  USER
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

enum Unit {
  // ### VOLUME
  // # METRIC
  ml
  l
  // # IMPERIAL/US
  tsp
  tbsp
  fl_oz
  cup
  pt
  qt
  gal

  // ### MASS
  // # METRIC
  mg
  g
  kg
  // # IMPERIAL/US
  lb
  oz

  // ### MISC
  to_taste
}

enum UnitSystem {
  IMPERIAL
  METRIC
}

enum TemperatureScale {
  C
  F
}

enum Status {
  PUBLISHED
  UNPUBLISHED
}

enum DisplayName {
  email
  username
  names
}
